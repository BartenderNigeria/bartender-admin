{"ast":null,"code":"var _jsxFileName = \"/Users/user/Bartender/bartender admin/src/auth/withAuth.js\";\nimport React, { Component } from \"react\";\nimport AuthHelperMethods from \"./AuthHelperMethods\";\nimport { withRouter } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function withAuth(AuthComponent) {\n  const Auth = new AuthHelperMethods();\n  return class AuthWrapped extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        confirm: null,\n        loaded: false\n      };\n    }\n\n    /* In the componentDid<ount, we would want to do a couple of important tasks in order to verify the current users authentication status\n    prior to granting them enterance into the app. */\n    componentDidMount() {\n      if (!Auth.loggedIn()) {\n        window.location = '/login';\n      } else {\n        /* Try to get confirmation message from the Auth helper. */\n        try {\n          const confirm = Auth.getConfirm();\n          console.log(\"confirmation is:\", confirm);\n          this.setState({\n            confirm: confirm,\n            loaded: true\n          });\n        } catch (err) {\n          /* Oh snap! Looks like there's an error so we'll print it out and log the user out for security reasons. */\n          console.log(err);\n          Auth.logout();\n          window.location = '/login';\n        }\n      }\n    }\n\n    render() {\n      if (this.state.loaded == true) {\n        if (this.state.confirm) {\n          console.log(\"confirmed!\");\n          return (\n            /*#__PURE__*/\n\n            /* component that is currently being wrapper(App.js) */\n            _jsxDEV(AuthComponent, {\n              history: this.props.history,\n              confirm: this.state.confirm\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 15\n            }, this)\n          );\n        } else {\n          console.log(\"not confirmed!\");\n          return null;\n        }\n      } else {\n        return null;\n      }\n    }\n\n  };\n}","map":{"version":3,"sources":["/Users/user/Bartender/bartender admin/src/auth/withAuth.js"],"names":["React","Component","AuthHelperMethods","withRouter","withAuth","AuthComponent","Auth","AuthWrapped","state","confirm","loaded","componentDidMount","loggedIn","window","location","getConfirm","console","log","setState","err","logout","render","props","history"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,eAAe,SAASC,QAAT,CAAkBC,aAAlB,EAAiC;AAC5C,QAAMC,IAAI,GAAG,IAAIJ,iBAAJ,EAAb;AAEA,SAAO,MAAMK,WAAN,SAA0BN,SAA1B,CAAoC;AAAA;AAAA;AAAA,WACzCO,KADyC,GACjC;AACNC,QAAAA,OAAO,EAAE,IADH;AAENC,QAAAA,MAAM,EAAE;AAFF,OADiC;AAAA;;AAMzC;AACN;AACMC,IAAAA,iBAAiB,GAAG;AAClB,UAAI,CAACL,IAAI,CAACM,QAAL,EAAL,EAAsB;AACpBC,QAAAA,MAAM,CAACC,QAAP,GAAkB,QAAlB;AACD,OAFD,MAEO;AACL;AACA,YAAI;AACF,gBAAML,OAAO,GAAGH,IAAI,CAACS,UAAL,EAAhB;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCR,OAAhC;AACA,eAAKS,QAAL,CAAc;AACZT,YAAAA,OAAO,EAAEA,OADG;AAEZC,YAAAA,MAAM,EAAE;AAFI,WAAd;AAID,SAPD,CAOE,OAAOS,GAAP,EAAY;AACZ;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACAb,UAAAA,IAAI,CAACc,MAAL;AACAP,UAAAA,MAAM,CAACC,QAAP,GAAkB,QAAlB;AACD;AACF;AACF;;AAEDO,IAAAA,MAAM,GAAG;AACP,UAAI,KAAKb,KAAL,CAAWE,MAAX,IAAqB,IAAzB,EAA+B;AAC7B,YAAI,KAAKF,KAAL,CAAWC,OAAf,EAAwB;AACtBO,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA;AAAA;;AACE;AACA,oBAAC,aAAD;AACE,cAAA,OAAO,EAAE,KAAKK,KAAL,CAAWC,OADtB;AAEE,cAAA,OAAO,EAAE,KAAKf,KAAL,CAAWC;AAFtB;AAAA;AAAA;AAAA;AAAA;AAFF;AAOD,SATD,MASO;AACLO,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,iBAAO,IAAP;AACD;AACF,OAdD,MAcO;AACL,eAAO,IAAP;AACD;AACF;;AA/CwC,GAA3C;AAkDD","sourcesContent":["import React, { Component } from \"react\";\nimport AuthHelperMethods from \"./AuthHelperMethods\";\n\nimport { withRouter } from 'react-router-dom';\n\nexport default function withAuth(AuthComponent) {\n    const Auth = new AuthHelperMethods();\n  \n    return class AuthWrapped extends Component {\n      state = {\n        confirm: null,\n        loaded: false\n      };\n  \n      /* In the componentDid<ount, we would want to do a couple of important tasks in order to verify the current users authentication status\n      prior to granting them enterance into the app. */\n      componentDidMount() {\n        if (!Auth.loggedIn()) {\n          window.location = '/login';\n        } else {\n          /* Try to get confirmation message from the Auth helper. */\n          try {\n            const confirm = Auth.getConfirm();\n            console.log(\"confirmation is:\", confirm);\n            this.setState({\n              confirm: confirm,\n              loaded: true\n            });\n          } catch (err) {\n            /* Oh snap! Looks like there's an error so we'll print it out and log the user out for security reasons. */\n            console.log(err);\n            Auth.logout();\n            window.location = '/login';\n          }\n        }\n      }\n  \n      render() {\n        if (this.state.loaded == true) {\n          if (this.state.confirm) {\n            console.log(\"confirmed!\");\n            return (\n              /* component that is currently being wrapper(App.js) */\n              <AuthComponent\n                history={this.props.history}\n                confirm={this.state.confirm}\n              />\n            );\n          } else {\n            console.log(\"not confirmed!\");\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    };\n\n  }"]},"metadata":{},"sourceType":"module"}