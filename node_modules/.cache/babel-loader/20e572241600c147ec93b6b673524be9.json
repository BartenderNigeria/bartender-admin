{"ast":null,"code":"var _jsxFileName = \"/Users/user/Bartender/bartender admin/src/components/Orders.js\";\nimport React, { Component } from 'react';\nimport Order from '../subcomponents/Order';\nimport OrderItems from '../subcomponents/OrderItems';\nimport AssignAgent from '../subcomponents/AssignAgent';\nimport Loader from '../subcomponents/Loader';\nimport ViewAgent from '../subcomponents/ViewAgent';\nimport ConfirmAction from \"../subcomponents/ConfirmAction\";\nimport OrderStatus from \"../subcomponents/OrderStatus\";\nimport { BottomScrollListener } from 'react-bottom-scroll-listener';\nimport PubNub from 'pubnub';\nimport { PubNubProvider, usePubNub } from 'pubnub-react';\nimport * as API from '../api/Api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst left = {\n  float: \"left\"\n};\nconst right = {\n  float: \"right\",\n  marginTop: \"-0.01px\"\n};\nconst btn_style = {\n  marginLeft: \"8px\",\n  marginRight: \"8px\",\n  width: \"120px\"\n};\nconst btn_grey = {\n  background: \"#797d7f\",\n  marginLeft: \"8px\",\n  marginRight: \"8px\",\n  width: \"120px\"\n};\nconst btn_blue = {\n  background: \"#2E86C1\",\n  marginLeft: \"8px\",\n  marginRight: \"8px\",\n  width: \"120px\"\n};\nconst pubnub = new PubNub({\n  publishKey: 'pub-c-da5b31c8-45d5-4018-82be-843221a3b91c',\n  subscribeKey: 'sub-c-de1f05de-af97-11e9-a732-8a2b99383297',\n  uuid: 'Bartender247ng'\n});\nexport default function Orders() {\n  return /*#__PURE__*/_jsxDEV(PubNubProvider, {\n    client: pubnub,\n    children: /*#__PURE__*/_jsxDEV(OrdersContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 7\n  }, this);\n}\n_c = Orders;\n\nclass OrdersContent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnDocumentBottom = () => {\n      switch (this.state.order_type) {\n        case \"all\":\n          this.getOrders();\n          break;\n\n        case \"completed\":\n          this.getCompleted();\n          break;\n\n        case \"pending\":\n          this.getPending();\n          break;\n      }\n    };\n\n    this.state = {\n      showConfirm: false,\n      title: \"Confirm Order Fulfillment\",\n      message: \"Please confirm that you want to mark this order as completed, this cant be undone.\",\n      isLoading: true,\n      channels: [\"neworder\", \"orderstatus\", \"routerequest\"],\n      total_count: 0,\n      orders: [],\n      agents: [],\n      showOrderStatus: false,\n      orderStatusAgent: {},\n      showOrderItems: false,\n      showAgentsToAssign: false,\n      showAgent: false,\n      showInvoice: false,\n      selected_order: {},\n      selected_agent: {},\n      order_type: \"all\",\n      city: \"LAGOS\"\n    };\n    /*this.pubnub = new PubNubReact({\n        publishKey: 'pub-c-da5b31c8-45d5-4018-82be-843221a3b91c',\n        subscribeKey: 'sub-c-de1f05de-af97-11e9-a732-8a2b99383297'\n    });*/\n\n    this.pubnub.init(this);\n    this.showOrderItems = this.showOrderItems.bind(this);\n    this.handleCloseModal = this.handleCloseModal.bind(this);\n    this.agentSelected = this.agentSelected.bind(this);\n    this.showAgentsToAssign = this.showAgentsToAssign.bind(this);\n    this.removeAgentFromRoute = this.removeAgentFromRoute.bind(this);\n    this.getAgents = this.getAgents.bind(this);\n    this.getOrders = this.getOrders.bind(this);\n    this.getCompleted = this.getCompleted.bind(this);\n    this.getPending = this.getPending.bind(this);\n    this.getCount = this.getCount.bind(this);\n    this.markOrderAsFulfilled = this.markOrderAsFulfilled.bind(this);\n    this.markOrderAsFulfilledWithId = this.markOrderAsFulfilledWithId.bind(this);\n    this.closeOrderStatus = this.closeOrderStatus.bind(this);\n    this.showLoading = this.showLoading.bind(this);\n    this.hideLoading = this.hideLoading.bind(this);\n    this.hideConfirm = this.hideConfirm.bind(this);\n    this.showConfirm = this.showConfirm.bind(this);\n    this.yesClicked = this.yesClicked.bind(this);\n    this.noClicked = this.noClicked.bind(this);\n    this.showAgent = this.showAgent.bind(this);\n    this.hideAgent = this.hideAgent.bind(this);\n  }\n\n  async yesClicked() {\n    this.hideConfirm();\n    this.showLoading();\n    const response = await API.fulfillOrder(this.state.selected_order._id);\n    this.hideLoading();\n\n    if (response == \"error\") {\n      //show error message\n      return;\n    }\n\n    if (response && response.data) {\n      this.setState(state => {\n        var orders = state.orders;\n        orders.splice(state.orders.indexOf(state.selected_order), 1, response.data);\n        return {\n          orders: orders,\n          selected_order: {}\n        };\n      });\n      this.getAgents();\n    }\n  }\n\n  noClicked() {\n    this.hideConfirm();\n  }\n\n  showConfirm(order) {\n    this.setState({\n      selected_order: order,\n      showConfirm: true\n    });\n  }\n\n  hideConfirm() {\n    this.setState({\n      showConfirm: false\n    });\n  }\n\n  markOrderAsFulfilled(e, order) {\n    this.showConfirm(order);\n  }\n\n  async markOrderAsFulfilledWithId(e, id) {\n    this.showLoading();\n    const response = await API.fulfillOrder(id);\n    this.hideLoading();\n\n    if (response == \"error\") {\n      //show error message\n      return;\n    }\n\n    if (response && response.data) {\n      this.setState(state => {\n        var orders = state.orders;\n        this.props.showMessage(\"Order has been successfully fulfilled\");\n        orders.map(order => {\n          if (order._id === id) {\n            orders.splice(state.orders.indexOf(order), 1, response.data);\n          }\n        });\n        return {\n          showOrderStatus: false,\n          orderStatusAgent: {},\n          orders: orders\n        };\n      });\n      this.getAgents();\n    }\n  }\n\n  showLoading() {\n    this.setState({\n      isLoading: true\n    });\n  }\n\n  hideLoading() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  showAgent(e, order) {\n    this.setState({\n      selected_agent: order.agent,\n      showAgent: true\n    });\n  }\n\n  hideAgent() {\n    this.setState({\n      showAgent: false\n    });\n  }\n\n  showOrderItems(e, order) {\n    this.setState({\n      showOrderItems: true,\n      selected_order: order\n    });\n    e.preventDefault();\n  }\n\n  showAgentsToAssign(e, order) {\n    this.setState({\n      showAgentsToAssign: true,\n      selected_order: order\n    });\n    e.preventDefault();\n  }\n\n  async agentSelected(e, agent) {\n    e.preventDefault();\n    this.showLoading();\n    const response = await API.assignAgentToOrder(agent._id, this.state.selected_order._id);\n    this.hideLoading();\n\n    if (response == \"error\") {\n      //show error message\n      return;\n    }\n\n    if (response && response.data) {\n      //set the selected order to agent assigned \n      this.getAgents();\n      this.props.showMessage(\"Request to fulfill order has been sent to agent\");\n    }\n  }\n\n  async removeAgentFromRoute(e, agent) {\n    e.preventDefault();\n    this.showLoading();\n    const response = await API.removeAgentFromOrder(agent._id, this.state.selected_order._id);\n    this.hideLoading();\n\n    if (response == \"error\") {\n      //show error message\n      return;\n    }\n\n    if (response && response.data) {\n      //set the selected order to agent assigned\n      this.getAgents();\n      this.props.showMessage(\"Agent was successfully unassigned from order\");\n    }\n  }\n\n  async getAgents() {\n    const response1 = await API.getAgents();\n\n    if (response1 == \"error\") {\n      //show error message\n      return;\n    }\n\n    if (response1 && response1.data) {\n      this.setState({\n        agents: response1.data\n      });\n    }\n  }\n\n  showInvoice(order) {\n    this.setState({\n      showInvoice: true,\n      selected_order: order\n    });\n  }\n\n  handleCloseModal() {\n    this.setState({\n      showOrderItems: false,\n      showAgentsToAssign: false,\n      showInvoice: false\n    });\n  }\n\n  closeOrderStatus() {\n    this.setState({\n      showOrderStatus: false,\n      orderStatusAgent: {}\n    });\n  }\n\n  async getOrders() {\n    this.showLoading();\n    const response = await API.getOrders(this.state.order_type === \"all\" ? this.state.orders.length : 0, this.state.city);\n    this.hideLoading();\n\n    if (response == \"error\") {\n      //show error message\n      this.setState({\n        order_type: \"all\"\n      });\n      return;\n    }\n\n    if (response && response.data) {\n      this.setState(state => {\n        if (state.orders.length > 0) {\n          if (state.order_type === \"all\") {\n            var orders = state.orders.concat(response.data);\n            return {\n              selected_order: {},\n              orders: orders,\n              order_type: \"all\"\n            };\n          } else {\n            return {\n              selected_order: {},\n              orders: response.data,\n              order_type: \"all\"\n            };\n          }\n        } else {\n          return {\n            selected_order: {},\n            orders: response.data,\n            order_type: \"all\"\n          };\n        }\n      });\n    }\n\n    this.getCount();\n  }\n\n  async getCompleted() {\n    this.showLoading();\n    const response = await API.getCompletedOrders(this.state.order_type === \"completed\" ? this.state.orders.length : 0, this.state.city);\n    this.hideLoading();\n\n    if (response == \"error\") {\n      //show error message\n      this.setState({\n        order_type: \"completed\"\n      });\n      return;\n    }\n\n    if (response && response.data) {\n      this.setState(state => {\n        if (state.orders.length > 0) {\n          if (state.order_type === \"completed\") {\n            var orders = state.orders.concat(response.data);\n            return {\n              selected_order: {},\n              orders: orders,\n              order_type: \"completed\"\n            };\n          } else {\n            return {\n              selected_order: {},\n              orders: response.data,\n              order_type: \"completed\"\n            };\n          }\n        } else {\n          return {\n            selected_order: {},\n            orders: response.data,\n            order_type: \"completed\"\n          };\n        }\n      });\n    }\n\n    this.getCount();\n  }\n\n  async getPending() {\n    this.showLoading();\n    const response = await API.getPendingOrders(this.state.order_type === \"pending\" ? this.state.orders.length : 0, this.state.city);\n    this.hideLoading();\n\n    if (response == \"error\") {\n      //show error message\n      this.setState({\n        order_type: \"pending\"\n      });\n      return;\n    }\n\n    if (response && response.data) {\n      this.setState(state => {\n        if (state.orders.length > 0) {\n          if (state.order_type === \"pending\") {\n            var orders = state.orders.concat(response.data);\n            return {\n              selected_order: {},\n              orders: orders,\n              order_type: \"pending\"\n            };\n          } else {\n            return {\n              selected_order: {},\n              orders: response.data,\n              order_type: \"pending\"\n            };\n          }\n        } else {\n          return {\n            selected_order: {},\n            orders: response.data,\n            order_type: \"pending\"\n          };\n        }\n      });\n    }\n\n    this.getCount();\n  }\n\n  async getCount() {\n    //orders count\n    const response1 = await API.getOrdersCount(this.state.city);\n\n    if (response1 == \"error\") {\n      //show error message\n      return;\n    }\n\n    if (response1 && response1.data) {\n      this.setState({\n        total_count: response1.data.count\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.getOrders();\n    this.getAgents();\n    this.pubnub.subscribe({\n      channels: this.state.channels\n    });\n    this.pubnub.getMessage('neworder', msg => {\n      this.getOrders();\n    });\n    this.pubnub.getMessage('orderstatus', data => {\n      var agent = data.userMetadata;\n      var response = data.message.status;\n\n      if (response === \"completed\") {\n        this.setState({\n          showOrderStatus: true,\n          orderStatusAgent: agent\n        });\n      }\n\n      if (response === \"abandoned\") {\n        var msg = \"Agent \" + agent.firstname + \" \" + agent.lastname + \" has abandoned his delivery\";\n        this.props.showMessage(msg);\n      }\n    });\n  }\n\n  onFieldChanged(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    }); //load the drinks based on the category selected\n\n    this.reloadDrinks();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"bt-city-holder\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            className: \"text-left\",\n            style: left,\n            children: [this.state.total_count, \" Order(s)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bt-center\",\n            style: {\n              width: \"200px\"\n            },\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              className: \"form-control\",\n              id: \"city\",\n              name: \"city\",\n              value: this.state.city,\n              onChange: this.onFieldChanged,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"LAGOS\",\n                children: \"Lagos\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"ACCRA\",\n                children: \"Accra\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 553,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bt-item-drink-profit shadow\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"laser-inline blue-bg bt-btn\",\n              onClick: this.getOrders,\n              style: this.state.order_type === \"all\" ? btn_blue : btn_grey,\n              children: \"all\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"laser-inline grey-bg bt-btn\",\n              onClick: this.getCompleted,\n              style: this.state.order_type === \"completed\" ? btn_blue : btn_grey,\n              children: \"completed\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 566,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"laser-inline grey-bg bt-btn\",\n              onClick: this.getPending,\n              style: this.state.order_type === \"pending\" ? btn_blue : btn_grey,\n              children: \"pending\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 567,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: this.state.orders.map(order => {\n            return /*#__PURE__*/_jsxDEV(Order, {\n              showAgent: this.showAgent,\n              order: order,\n              markOrderAsFulfilled: this.markOrderAsFulfilled,\n              showAgentsToAssign: this.showAgentsToAssign,\n              showOrderItems: this.showOrderItems\n            }, order._id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 40\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 17\n      }, this), this.state.showAgent ? /*#__PURE__*/_jsxDEV(ViewAgent, {\n        agent: this.state.selected_agent,\n        showViewAgent: this.state.showAgent,\n        hideAgent: this.hideAgent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 44\n      }, this) : \"\", this.state.showOrderStatus ? /*#__PURE__*/_jsxDEV(OrderStatus, {\n        agent: this.state.orderStatusAgent,\n        markOrderAsFulfilledWithId: this.markOrderAsFulfilledWithId,\n        closeOrderStatus: this.closeOrderStatus,\n        showOrderStatus: this.state.showOrderStatus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 50\n      }, this) : \"\", /*#__PURE__*/_jsxDEV(ConfirmAction, {\n        yesClicked: this.yesClicked,\n        noClicked: this.noClicked,\n        showConfirm: this.state.showConfirm,\n        title: this.state.title,\n        message: this.state.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Loader, {\n        isLoading: this.state.isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 590,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BottomScrollListener, {\n        onBottom: this.handleOnDocumentBottom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 17\n      }, this), this.state.showAgentsToAssign ? /*#__PURE__*/_jsxDEV(AssignAgent, {\n        agents: this.state.agents,\n        removeAgentFromRoute: this.removeAgentFromRoute,\n        showAgentsToAssign: this.state.showAgentsToAssign,\n        handleCloseModal: this.handleCloseModal,\n        agentSelected: this.agentSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 51\n      }, this) : \"\", this.state.showOrderItems ? /*#__PURE__*/_jsxDEV(OrderItems, {\n        showOrderItems: this.state.showOrderItems,\n        order: this.state.selected_order,\n        handleCloseModal: this.handleCloseModal\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 596,\n        columnNumber: 47\n      }, this) : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Orders\");","map":{"version":3,"sources":["/Users/user/Bartender/bartender admin/src/components/Orders.js"],"names":["React","Component","Order","OrderItems","AssignAgent","Loader","ViewAgent","ConfirmAction","OrderStatus","BottomScrollListener","PubNub","PubNubProvider","usePubNub","API","left","float","right","marginTop","btn_style","marginLeft","marginRight","width","btn_grey","background","btn_blue","pubnub","publishKey","subscribeKey","uuid","Orders","OrdersContent","constructor","props","handleOnDocumentBottom","state","order_type","getOrders","getCompleted","getPending","showConfirm","title","message","isLoading","channels","total_count","orders","agents","showOrderStatus","orderStatusAgent","showOrderItems","showAgentsToAssign","showAgent","showInvoice","selected_order","selected_agent","city","init","bind","handleCloseModal","agentSelected","removeAgentFromRoute","getAgents","getCount","markOrderAsFulfilled","markOrderAsFulfilledWithId","closeOrderStatus","showLoading","hideLoading","hideConfirm","yesClicked","noClicked","hideAgent","response","fulfillOrder","_id","data","setState","splice","indexOf","order","e","id","showMessage","map","agent","preventDefault","assignAgentToOrder","removeAgentFromOrder","response1","length","concat","getCompletedOrders","getPendingOrders","getOrdersCount","count","componentDidMount","subscribe","getMessage","msg","userMetadata","status","firstname","lastname","onFieldChanged","event","target","value","type","checked","name","reloadDrinks","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport Order from '../subcomponents/Order';\n\nimport OrderItems from '../subcomponents/OrderItems';\nimport AssignAgent from '../subcomponents/AssignAgent';\nimport Loader from '../subcomponents/Loader';\nimport ViewAgent  from '../subcomponents/ViewAgent'\nimport ConfirmAction from \"../subcomponents/ConfirmAction\";\nimport OrderStatus from \"../subcomponents/OrderStatus\";\n\nimport { BottomScrollListener } from 'react-bottom-scroll-listener'\n\nimport PubNub from 'pubnub';\nimport { PubNubProvider, usePubNub } from 'pubnub-react';\n\nimport * as API from '../api/Api';\n\nconst left = {\n    float: \"left\"\n}\n\nconst right = {\n    float: \"right\",\n    marginTop: \"-0.01px\"\n}\n\nconst btn_style = {\n    marginLeft: \"8px\",\n    marginRight: \"8px\",\n    width: \"120px\"\n}\n\nconst btn_grey = {\n    background: \"#797d7f\",\n    marginLeft: \"8px\",\n    marginRight: \"8px\",\n    width: \"120px\"\n}\n\nconst btn_blue = {\n    background: \"#2E86C1\",\n    marginLeft: \"8px\",\n    marginRight: \"8px\",\n    width: \"120px\"\n}\n\nconst pubnub = new PubNub({\n    publishKey: 'pub-c-da5b31c8-45d5-4018-82be-843221a3b91c',\n    subscribeKey: 'sub-c-de1f05de-af97-11e9-a732-8a2b99383297',\n    uuid: 'Bartender247ng'\n});\n\nexport default function Orders() {\n    return (\n      <PubNubProvider client={pubnub}>\n        <OrdersContent />\n      </PubNubProvider>\n    );\n}\n\nclass OrdersContent extends Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showConfirm: false,\n            title: \"Confirm Order Fulfillment\",\n            message: \"Please confirm that you want to mark this order as completed, this cant be undone.\",\n            isLoading: true,\n            channels: [\"neworder\", \"orderstatus\", \"routerequest\"],\n            total_count:0,\n            orders: [],\n            agents: [],\n            showOrderStatus: false,\n            orderStatusAgent: {},\n            showOrderItems: false,\n            showAgentsToAssign: false,\n            showAgent: false,\n            showInvoice: false,\n            selected_order: {},\n            selected_agent: {},\n            order_type: \"all\",\n            city: \"LAGOS\"\n        }\n\n        /*this.pubnub = new PubNubReact({\n            publishKey: 'pub-c-da5b31c8-45d5-4018-82be-843221a3b91c',\n            subscribeKey: 'sub-c-de1f05de-af97-11e9-a732-8a2b99383297'\n        });*/\n\n        this.pubnub.init(this);\n\n        this.showOrderItems = this.showOrderItems.bind(this);\n        this.handleCloseModal = this.handleCloseModal.bind(this);\n        this.agentSelected = this.agentSelected.bind(this);\n        this.showAgentsToAssign = this.showAgentsToAssign.bind(this);\n        this.removeAgentFromRoute = this.removeAgentFromRoute.bind(this);\n        this.getAgents = this.getAgents.bind(this);\n\n        this.getOrders = this.getOrders.bind(this);\n        this.getCompleted = this.getCompleted.bind(this);\n        this.getPending = this.getPending.bind(this);\n        this.getCount = this.getCount.bind(this);\n\n        this.markOrderAsFulfilled = this.markOrderAsFulfilled.bind(this);\n        this.markOrderAsFulfilledWithId = this.markOrderAsFulfilledWithId.bind(this);\n        this.closeOrderStatus = this.closeOrderStatus.bind(this);\n        this.showLoading = this.showLoading.bind(this);\n        this.hideLoading = this.hideLoading.bind(this);\n        this.hideConfirm = this.hideConfirm.bind(this);\n        this.showConfirm = this.showConfirm.bind(this);\n        this.yesClicked = this.yesClicked.bind(this);\n        this.noClicked = this.noClicked.bind(this);\n        this.showAgent = this.showAgent.bind(this);\n        this.hideAgent = this.hideAgent.bind(this);\n    }\n\n    async yesClicked(){\n        this.hideConfirm();\n        this.showLoading();\n\n        const response = await API.fulfillOrder(this.state.selected_order._id);\n\n        this.hideLoading();\n\n        if(response==\"error\"){\n            //show error message\n            return;\n        }\n\n        if(response && response.data){\n            this.setState(state => {\n                var orders = state.orders;\n\n                orders.splice(state.orders.indexOf(state.selected_order),1,response.data);\n\n                return {\n                    orders: orders,\n                    selected_order: {}\n                }\n            })\n\n            this.getAgents();\n        }\n    }\n    \n    noClicked(){\n        this.hideConfirm();\n    }\n\n    showConfirm(order){\n        this.setState({\n            selected_order: order,\n            showConfirm: true\n        })\n    }\n\n    hideConfirm(){\n        this.setState({\n            showConfirm: false\n        })\n    }\n\n    markOrderAsFulfilled(e,order){\n        this.showConfirm(order);\n    }\n\n    async markOrderAsFulfilledWithId(e,id){\n        this.showLoading();\n\n        const response = await API.fulfillOrder(id);\n\n        this.hideLoading();\n\n        if(response==\"error\"){\n            //show error message\n            return;\n        }\n\n        if(response && response.data){\n            this.setState(state => {\n                var orders = state.orders;\n\n                this.props.showMessage(\"Order has been successfully fulfilled\");\n\n                orders.map(order => {\n                    if(order._id === id){\n                        orders.splice(state.orders.indexOf(order),1,response.data);\n                    }\n                })\n                \n                return {\n                    showOrderStatus: false,\n                    orderStatusAgent: {},\n                    orders: orders\n                }\n            })\n\n            this.getAgents();\n        }\n    }\n\n    showLoading(){\n        this.setState({\n            isLoading: true\n        })\n    }\n\n    hideLoading(){\n        this.setState({\n            isLoading: false\n        })\n    }\n\n    showAgent(e, order){\n        this.setState({\n            selected_agent: order.agent,\n            showAgent: true\n        })\n    }\n\n    hideAgent(){\n        this.setState({\n            showAgent: false\n        })\n    }\n\n    handleOnDocumentBottom = () => {\n        switch(this.state.order_type){\n            case \"all\":\n                this.getOrders();\n            break;\n            case \"completed\":\n                this.getCompleted();\n            break;\n            case \"pending\":\n                this.getPending()\n            break;\n        }\n    }\n\n    showOrderItems(e,order){\n        this.setState({\n            showOrderItems: true,\n            selected_order: order\n        })\n        e.preventDefault();\n    }\n\n    showAgentsToAssign(e, order){\n        this.setState({\n            showAgentsToAssign: true,\n            selected_order: order\n        })\n        e.preventDefault();\n    }\n\n    async agentSelected(e, agent){\n        e.preventDefault();\n\n        this.showLoading();\n\n        const response = await API.assignAgentToOrder(agent._id, this.state.selected_order._id);\n        this.hideLoading();\n        if(response==\"error\"){\n            //show error message\n            return;\n        }\n\n        if(response && response.data){\n            //set the selected order to agent assigned \n            this.getAgents();\n            this.props.showMessage(\"Request to fulfill order has been sent to agent\")\n        }\n    }\n\n    async removeAgentFromRoute(e, agent){\n        e.preventDefault();\n\n        this.showLoading();\n\n        const response = await API.removeAgentFromOrder(agent._id, this.state.selected_order._id);\n        this.hideLoading();\n        if(response==\"error\"){\n            //show error message\n            return;\n        }\n\n        if(response && response.data){\n            //set the selected order to agent assigned\n            this.getAgents();\n            this.props.showMessage(\"Agent was successfully unassigned from order\");\n        }\n    }\n\n    async getAgents(){\n        const response1 = await API.getAgents();\n\n        if(response1==\"error\"){\n            //show error message\n            return;\n        }\n\n        if(response1 && response1.data){\n            this.setState({\n                agents: response1.data\n            })   \n        }\n    }\n\n    showInvoice(order){\n        this.setState({\n            showInvoice: true,\n            selected_order: order\n        })\n    }\n\n    handleCloseModal(){\n        this.setState({\n            showOrderItems: false,\n            showAgentsToAssign: false,\n            showInvoice: false\n        })\n    }\n\n    closeOrderStatus(){\n        this.setState({\n            showOrderStatus: false,\n            orderStatusAgent: {}\n        })\n    }\n\n    async getOrders(){\n        this.showLoading();\n\n        const response = await API.getOrders((this.state.order_type === \"all\") ? this.state.orders.length : 0, this.state.city);\n\n        this.hideLoading();\n\n        if(response==\"error\"){\n            //show error message\n\n            this.setState({\n                order_type: \"all\"\n            });\n\n            return;\n        }\n\n        if(response && response.data){\n            this.setState(state => {\n\n                if(state.orders.length>0){\n                    if(state.order_type === \"all\"){\n                        var orders = state.orders.concat(response.data);\n\n                        return {\n                            selected_order: {},\n                            orders: orders,\n                            order_type: \"all\"\n                        }\n                    }\n                    else{\n                        return {\n                            selected_order: {},\n                            orders: response.data,\n                            order_type: \"all\"\n                        }\n                    }\n                }\n                else{\n                    return {\n                        selected_order: {},\n                        orders: response.data,\n                        order_type: \"all\"\n                    }\n                }\n            })\n        }\n\n        this.getCount();\n    }\n\n    async getCompleted(){\n        this.showLoading();\n\n        const response = await API.getCompletedOrders( (this.state.order_type === \"completed\") ? this.state.orders.length : 0, this.state.city );\n\n        this.hideLoading();\n\n        if(response==\"error\"){\n            //show error message\n\n            this.setState({\n                order_type: \"completed\"\n            });\n\n            return;\n        }\n\n        if(response && response.data){\n            this.setState(state => {\n\n                if(state.orders.length>0){\n                    if(state.order_type === \"completed\"){\n                        var orders = state.orders.concat(response.data);\n\n                        return {\n                            selected_order: {},\n                            orders: orders,\n                            order_type: \"completed\"\n                        }\n                    }\n                    else{\n                        return {\n                            selected_order: {},\n                            orders: response.data,\n                            order_type: \"completed\"\n                        }\n                    }\n                }\n                else{\n                    return {\n                        selected_order: {},\n                        orders: response.data,\n                        order_type: \"completed\"\n                    }\n                }\n            })\n        }\n\n        this.getCount();\n    }\n\n    async getPending(){\n        this.showLoading();\n        \n        const response = await API.getPendingOrders( (this.state.order_type === \"pending\") ? this.state.orders.length : 0, this.state.city );\n\n        this.hideLoading();\n\n        if(response==\"error\"){\n            //show error message\n\n            this.setState({\n                order_type: \"pending\"\n            });\n\n            return;\n        }\n\n        if(response && response.data){\n            this.setState(state => {\n\n                if(state.orders.length>0){\n                    if(state.order_type === \"pending\"){\n                        var orders = state.orders.concat(response.data);\n\n                        return {\n                            selected_order: {},\n                            orders: orders,\n                            order_type: \"pending\"\n                        }\n                    }\n                    else{\n                        return {\n                            selected_order: {},\n                            orders: response.data,\n                            order_type: \"pending\"\n                        }\n                    }\n                }\n                else{\n                    return {\n                        selected_order: {},\n                        orders: response.data,\n                        order_type: \"pending\"\n                    }\n                }\n            })\n        }\n\n        this.getCount();\n    }\n\n    async getCount(){\n        //orders count\n        const response1 = await API.getOrdersCount(this.state.city);\n\n        if(response1==\"error\"){\n            //show error message\n            return;\n        }\n\n        if(response1 && response1.data){\n            this.setState({\n                total_count: response1.data.count\n            })   \n        }\n    }\n\n    componentDidMount(){\n        this.getOrders();\n\n        this.getAgents();\n\n        this.pubnub.subscribe({\n            channels: this.state.channels\n        });\n        \n        this.pubnub.getMessage('neworder', (msg) => {\n            this.getOrders();\n        });\n\n        this.pubnub.getMessage('orderstatus', (data) => {\n            \n            var agent = data.userMetadata;\n        \n            var response = data.message.status;\n\n            if(response===\"completed\"){\n                this.setState({\n                    showOrderStatus: true,\n                    orderStatusAgent: agent,\n                })\n            }\n\n            if(response===\"abandoned\"){\n                var msg = \"Agent \" +agent.firstname+\" \"+agent.lastname +\" has abandoned his delivery\";\n                this.props.showMessage(msg);\n            }\n        });\n    }\n\n    onFieldChanged(event){\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n        \n        this.setState({\n            [name]: value\n        })\n\n        //load the drinks based on the category selected\n        this.reloadDrinks()\n    }\n\n    render(){\n        return(\n            <div className=\"top-div\">\n                <div className=\"container\">\n                    <div className=\"bt-city-holder\" >\n                        <h5 className=\"text-left\" style={left}>{this.state.total_count} Order(s)</h5>\n\n                        <div className=\"bt-center\" style={{width: \"200px\"}}>\n                            <select className=\"form-control\" id=\"city\" name=\"city\" value={this.state.city} onChange={this.onFieldChanged}>\n                                <option value=\"LAGOS\">Lagos</option>\n                                <option value=\"ACCRA\">Accra</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"row\">\n                        <div className=\"bt-item-drink-profit shadow\">\n                            <button className=\"laser-inline blue-bg bt-btn\" onClick={this.getOrders} style={ (this.state.order_type === \"all\") ? btn_blue : btn_grey}>all</button>\n                            <button className=\"laser-inline grey-bg bt-btn\" onClick={this.getCompleted} style={ (this.state.order_type === \"completed\") ? btn_blue : btn_grey}>completed</button>\n                            <button className=\"laser-inline grey-bg bt-btn\" onClick={this.getPending} style={ (this.state.order_type === \"pending\") ? btn_blue : btn_grey}>pending</button>\n                        </div>\n                        <br/>\n                    </div>\n                    <div className=\"row\">\n                        {\n                            this.state.orders.map(order => {\n                                return <Order key={order._id} showAgent={this.showAgent} order={order} markOrderAsFulfilled={this.markOrderAsFulfilled} showAgentsToAssign={this.showAgentsToAssign} showOrderItems={this.showOrderItems}/>\n                            })\n                        }\n                    </div>\n                </div>\n\n                {\n                    this.state.showAgent ? <ViewAgent agent={this.state.selected_agent} showViewAgent={this.state.showAgent} hideAgent={this.hideAgent}/> : \"\"\n                }\n\n                {\n                    this.state.showOrderStatus ? <OrderStatus agent={this.state.orderStatusAgent} markOrderAsFulfilledWithId={this.markOrderAsFulfilledWithId} closeOrderStatus={this.closeOrderStatus} showOrderStatus={this.state.showOrderStatus} /> : \"\"\n                }\n\n                <ConfirmAction yesClicked={this.yesClicked} noClicked={this.noClicked} showConfirm={this.state.showConfirm} title={this.state.title} message={this.state.message}/>\n\n                <Loader isLoading={this.state.isLoading}/>\n\n                <BottomScrollListener onBottom={this.handleOnDocumentBottom} />\n                \n                { this.state.showAgentsToAssign ? <AssignAgent agents={this.state.agents} removeAgentFromRoute={this.removeAgentFromRoute} showAgentsToAssign={this.state.showAgentsToAssign} handleCloseModal={this.handleCloseModal} agentSelected={this.agentSelected} /> : \"\"}\n               \n                { this.state.showOrderItems ? <OrderItems showOrderItems={this.state.showOrderItems} order={this.state.selected_order} handleCloseModal={this.handleCloseModal}/> : \"\" }\n\n            </div>\n        )\n    }\n}"]},"metadata":{},"sourceType":"module"}