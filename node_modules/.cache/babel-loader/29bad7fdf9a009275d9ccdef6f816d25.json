{"ast":null,"code":"import React from 'react';\nimport axios from 'axios';\nimport decode from 'jwt-decode';\nconst login_url = '/login';\nexport default class AuthHelperMethods {\n  constructor() {\n    this.login = (username, password) => {\n      return this.axios(login_url, {\n        username,\n        password\n      }).then(res => {\n        this.setToken(res.data.token);\n        return res;\n      }).catch(err => {\n        console.log(err);\n        return \"error\";\n      });\n    };\n\n    this.loggedIn = () => {\n      // Checks if there is a saved token and it's still valid\n      const token = this.getToken(); // Getting token from localstorage\n\n      return !!token && !this.isTokenExpired(token); // handwaiving here\n    };\n\n    this.isTokenExpired = token => {\n      try {\n        const decoded = decode(token);\n\n        if (decoded.exp < Date.now() / 1000) {\n          // Checking if token is expired.\n          return true;\n        } else return false;\n      } catch (err) {\n        console.log(\"expired check failed! Line 42: AuthService.js\");\n        return false;\n      }\n    };\n\n    this.setToken = idToken => {\n      // Saves user token to localStorage\n      localStorage.setItem(\"id_token\", idToken);\n    };\n\n    this.getToken = () => {\n      // Retrieves the user token from localStorage\n      return localStorage.getItem(\"id_token\");\n    };\n\n    this.logout = () => {\n      // Clear user token and profile data from localStorage\n      localStorage.removeItem(\"id_token\");\n    };\n\n    this.getConfirm = () => {\n      // Using jwt-decode npm package to decode the token\n      let answer = decode(this.getToken());\n      console.log(\"Recieved answer!\");\n      return answer;\n    };\n\n    this.axios = (url, data) => {\n      // performs api calls sending the required authentication headers\n      const headers = {\n        \"Accept\": \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }; // Setting Authorization header\n      // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n\n      if (this.loggedIn()) {\n        headers[\"Authorization\"] = \"Bearer:\" + this.getToken();\n      }\n\n      return axios({\n        url: url,\n        method: \"post\",\n        data: data,\n        baseURL: 'https://api.bartender247ng.com/admin',\n        //baseURL: ' http://localhost:3777/admin',\n        timeout: 30000,\n        headers: headers\n      }).then(this._checkStatus).then(response => response).catch(err => err);\n    };\n\n    this._checkStatus = response => {\n      // raises an error in case response status is not a success\n      if (response.status >= 200 && response.status < 300) {\n        // Success status lies between 200 to 300\n        return response;\n      } else {\n        var error = new Error(response.statusText);\n        error.response = response;\n        throw error;\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["/Users/user/Bartender/bartender/client/src/auth/AuthHelperMethods.js"],"names":["React","axios","decode","login_url","AuthHelperMethods","login","username","password","then","res","setToken","data","token","catch","err","console","log","loggedIn","getToken","isTokenExpired","decoded","exp","Date","now","idToken","localStorage","setItem","getItem","logout","removeItem","getConfirm","answer","url","headers","method","baseURL","timeout","_checkStatus","response","status","error","Error","statusText"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport axios from 'axios';\n\nimport decode from 'jwt-decode'\n\nconst login_url = '/login'\n\nexport default class AuthHelperMethods{\n\n    login = (username, password) => {\n        return  this.axios(login_url, {username,password})\n                    .then(res => {\n                        this.setToken(res.data.token); \n                        return res;\n                    })\n                    .catch(err => {\n                        console.log(err);\n                        return \"error\";\n                    })\n    }\n\n    loggedIn = () => {\n        // Checks if there is a saved token and it's still valid\n        const token = this.getToken(); // Getting token from localstorage\n        return !!token && !this.isTokenExpired(token); // handwaiving here\n    };\n\n    isTokenExpired = token => {\n        try {\n            const decoded = decode(token);\n            if (decoded.exp < Date.now() / 1000) {\n            // Checking if token is expired.\n            return true;\n            } else return false;\n        } catch (err) {\n            console.log(\"expired check failed! Line 42: AuthService.js\");\n            return false;\n        }\n    };\n\n    setToken = idToken => {\n        // Saves user token to localStorage\n        localStorage.setItem(\"id_token\", idToken);\n    };\n\n    getToken = () => {\n        // Retrieves the user token from localStorage\n        return localStorage.getItem(\"id_token\");\n    };\n\n    logout = () => {\n        // Clear user token and profile data from localStorage\n        localStorage.removeItem(\"id_token\");\n    };\n\n    getConfirm = () => {\n        // Using jwt-decode npm package to decode the token\n        let answer = decode(this.getToken());\n        console.log(\"Recieved answer!\");\n        return answer;\n    };\n    \n    axios = (url, data) => {\n        // performs api calls sending the required authentication headers\n        const headers = {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        };\n\n        // Setting Authorization header\n        // Authorization: Bearer xxxxxxx.xxxxxxxx.xxxxxx\n        if (this.loggedIn()) {\n            headers[\"Authorization\"] = \"Bearer:\" + this.getToken();\n        }\n\n        return axios({\n            url:url,\n            method: \"post\",\n            data: data, \n            baseURL: 'https://api.bartender247ng.com/admin',\n            //baseURL: ' http://localhost:3777/admin',\n            timeout: 30000,\n            headers: headers\n        })\n        .then(this._checkStatus)\n        .then(response => response)\n        .catch(err => err)\n    };\n\n    _checkStatus = response => {\n        // raises an error in case response status is not a success\n        if (response.status >= 200 && response.status < 300) {\n            // Success status lies between 200 to 300\n            return response;\n        } else {\n            var error = new Error(response.statusText);\n            error.response = response;\n            throw error;\n        }\n    };\n\n}"]},"metadata":{},"sourceType":"module"}